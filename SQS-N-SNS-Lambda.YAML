AWSTemplateFormatVersion: 2010-09-09
# Create One SQS Queue
Resources:
  MyQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: "SampleQueue"

# Create SNS Topic
  MySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "SampleTopic"

# Create Subscription for SQS
  MySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SampleQueue"
      Protocol: "sqs"
      RawMessageDelivery: 'true'
      TopicArn: !Ref 'MySNSTopic'

  # SQS Policy Implement
  SampleSQSPolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - "sqs:SendMessage"
          - "sqs:GetQueueAttributes"
          - "sqs:GetQueueUrl"
          Effect: "Allow"
          Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SampleQueue"
          Principal: "*"
      Queues:
        - !Ref MyQueue

  # Set Lambda Role/Policies
  MyRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "Lambda21"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "AWSLambdaBasicExecutionRole"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      - PolicyName: AmazonS3getAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action: "s3:*"
            Resource: "*"
      - PolicyName: SqsQueueExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
            Resource: "*"

  # Create Lambda Function
  MyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt ["MyRole", "Arn"]
      Runtime: "python3.6"
      FunctionName: "lambda_function"
      Timeout: 3
      Code:
          ZipFile: |
            import json
            import boto3

            BUCKET_NAME = 'node1-0-bucket'

            def s3_client():
                s3 = boto3.client('s3')
                return s3

            def put_object_to_bucket(Body):
                object_key = 'README2.md'
                return s3_client().put_object( Body=Body, Bucket=BUCKET_NAME, Key=object_key)

            def lambda_handler(event, context):
                for record in event['Records']:
                    payload = record["body"]
                    put_object_to_bucket(payload)
                    print(str(payload))
          # S3Bucket: "node1-0-bucket"
          # S3Key: "README2.md"
          # S3ObjectVersion: "zdm4YxBgHUVhjCpNhciGWeiquJSWyNJi"
          
  # Create Mapping in  lambda function for SQS
  LambdaEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      EventSourceArn: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SampleQueue"
      FunctionName: !GetAtt MyFunction.Arn
      Enabled: true
      MaximumBatchingWindowInSeconds: 0